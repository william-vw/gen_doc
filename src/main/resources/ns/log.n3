#   n3 definition of some Semantic Web terms
#
# These raise the level above RDF's pure relational data,
# and Web Ontology's ontological level, to allow rules to be expressed
# and inference done. They connect the inference to the web,
# allowing data to be fetched from resources elsewhere, and remote
# servers to be queried.
# 
# $Id: log.n3,v 1.25 2010-03-26 20:35:14 timbl Exp $

@prefix cc: <http://creativecommons.org/ns#>.
@prefix owl: <http://www.w3.org/2002/07/owl#>.
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix void: <http://rdfs.org/ns/void#> .
@prefix log: <http://www.w3.org/2000/10/swap/log#>.
@prefix vs: <http://www.w3.org/2003/06/sw-vocab-status/ns#> .
@prefix : <#>.

<>  rdfs:label "n3 definition of some Semantic Web terms";
    rdfs:comment """
These raise the level above RDF's pure relational data,
and Web Ontology's ontological level, to allow rules to be expressed
and inference done. They connect the inference to the web,
allowing data to be fetched from resources elsewhere, and remote
servers to be queried.
""";
    cc:license <http://www.w3.org/Consortium/Legal/copyright-software> .

log:Document a rdfs:Class; rdfs:subClassOf void:Dataset .
log:N3Document a rdfs:Class;
    rdfs:label "N3Document";
    owl:equivalentClass [ 
        owl:intersectionOf ( 
            log:Document
            [   a owl:Restriction ;
                owl:onProperty void:feature ;
                owl:hasValue <http://www.w3.org/ns/formats/N3>
            ]
        ) ;
    ] ;
    rdfs:comment    """A document which, which parsed as Notation3
as defined in general by http://www.w3.org/DesignIssues/Notation3.html
and this schema, conveys the intent of the author by the semantics defined
on those specifications, and the semantics defined by the specifications
of any other identifiers used in the document.
""" .

################################################## Syntactic level
#
#  It isn't clear to me that these should be described as Properties
#  and Classes.  They operate at a level of symbol identity, not identity of the things referred to.
#

log:equalTo a rdf:Property, owl:FunctionalProperty, owl:InverseFunctionalProperty;
    rdfs:label "equalTo";
    rdfs:comment
"""Determines if two RDF resources are the same.

`true` if and only if `$s` and `$o` are the same RDF node (symbol or literal).

Not to be confused with owl:sameAs.""".

log:notEqualTo a rdf:Property;
    owl:inverse log:equalTo;
    rdfs:label "notEqualTo";
    rdfs:comment
"""Determines if two RDF resources are not the same.

`true` if and only if `$s` and `$o` are not the same RDF node (symbol or literal).""".

log:rawType a rdf:Property, owl:FunctionalProperty;
    rdfs:label "rawType";
    rdfs:range log:Type;
    rdfs:comment """Returns an identifier based on the type of the RDF Resource.

`true` if the type of `$s` is the same as `$o`, or binds the type to `$o`.

`$o` is unbound or one of `log:Formula`, `log:Literal`, `log:List`, `log:Set` or `log:Other`.

Example: `log:semanticsOrError` returns either a formula or a string, and you can check which using `log:rawType`. """.

log:Type a rdfs:Class;
    rdfs:label "Type";
    rdfs:comment """
The class of Notation3-specifiec resource types.
""";
    vs:term_status "unstable".

log:Formula a rdfs:Class; rdfs:subClassOf log:Type;
    rdfs:label "Formula";
    rdfs:comment "The class of Notation-3 Formulae".
log:List    a rdfs:Class; rdfs:subClassOf log:Type, rdf:List;
    rdfs:label "List";
    rdfs:comment "A Notation-3 List, as a resource. A sub-class of an RDF List.".
log:String  a rdfs:Class; rdfs:subClassOf log:Type, rdfs:Literal;
    rdfs:label "List";
    rdfs:comment "An RDF Literal".
log:Other   a rdfs:Class; rdfs:subClassOf log:Type;
    rdfs:label "List";
    rdfs:comment "Some other Notation-3 type".

#   The following are inherent in the translation of N3 syntax to quad representation:

# FIXME: no such thing as rdf:SyntaxArc.
log:forSome a rdf:SyntaxArc;  #@@@@@   NOT a real property. A pseudo property
    rdfs:label "for Some";
    rdfs:domain log:Formula;
    rdfs:comment """A is true for some object for which here we use B. This
is NOT a real rdf property in its behavior - a pseudo-property.
For example, removal of it from a formula does not
preserve truth, and substitution is not permitted on its object.""" ;
    vs:term_status "unstable".

log:forAll a log:SyntaxArc;  #@@@@@   NOT a real property. A pseudo property
    rdfs:label     "for All";
    rdfs:domain log:Formula;
    rdfs:comment """A is true for any object in place of B.
This is NOT a real rdf property in its behavior - a pseudo-property.
For examples substitution is not permitted on its object.""";
    vs:term_status "unstable".


#########################################################
#
#  The following are used for inference
#

log:Truth a rdfs:Class;
    rdfs:label "Truth";
    rdfs:comment """Something which is true: believe it as you would believe this.

Understood natively by cwm in that it will execute rules in a formula
declared a Truth within a formula it is already taking rules from.""".

#log:Falsehood a rdf:Class;
#   rdfs:label "Falsehood";
#   rdfs:comment "Something which is not true. Not the complement of True!";
#   rdfs:domain log:context.
#

log:implies a rdf:Property;
    rdfs:label "implies";
    rdfs:comment """Logical implication. 
This is the relation between the antecedent (subject) and conclusion (object) of a rule.
The application of a rule to a knowledge-base is as follows.
For every substitution which, applied to the antecedent (`$s`), gives a formula (`$o`) which is a subset of the knowledge-base, then the result of applying that same substitution to the conclusion may be added to the knowledge-base.
Related: see `log:conclusion`.""";
    rdfs:domain log:Formula;
    rdfs:range log:Formula;
    rdfs:isDefinedBy <>.

log:includes a rdf:Property;
    rdfs:label "includes";
    rdfs:comment """The subject formula includes the object formula.

`true` if and only if `s` includes `$o` if there exists some substitution which when applied to `$o` creates a formula B' such that for every statement in B' is also in `$s`, every variable universally (or existentially) quantified in B' is quantified in the same way in `$s`. 

Variable substitution is applied recursively to nested compound terms such as formulae, lists and sets.

Note: you can use this to peer inside nested formulae.""";
    rdfs:domain log:Formula;
    rdfs:range log:Formula;
    rdfs:isDefinedBy <>.

log:notIncludes a rdf:Property;
    rdfs:label "not includes";
    rdfs:comment """The object formula is NOT a subset of subject.

`true` if and only if `log:includes` is `false`. The converse of log:includes.

Related: see `log:includes`.""";
    rdfs:domain log:Formula;
    rdfs:range log:Formula;
    rdfs:isDefinedBy <>.


# The following connect the inference engine to the web


log:parsedAsN3 a rdf:Property;
    rdfs:comment """The subject string, parsed as N3, gives this formula.

`true` if and only if `$s`, parsed as N3, gives `$o`.

`$s` should be a syntactically valid string in N3 format.

Related: see `log:n3String`.""";
    rdfs:label "parses to N3";
    rdfs:domain log:N3;
    rdfs:range log:Formula.
 
 log:n3String a rdf:Property;
    rdfs:comment """The subject formula, expressed as N3, gives this string.

`true` if and only if `$s`, serialized as N3, gives `$o`.

Related: see `log:parsedAsN3`.""";
    rdfs:label "n3 string";
    rdfs:domain log:Formula;
    rdfs:range log:N3.

log:semantics a rdf:Property;
    rdfs:domain log:N3Document;
    rdfs:range  log:Formula;
    rdfs:label  "semantics";
    rdfs:comment """The log:semantics of a document is the formula achieved by parsing representation of the document.
For a document in Notation3, `log:semantics` is the `log:parsedAsN3` of the `log:content` of the document.
For a document in another RDF syntax, it is parsed according to the appropriate specification to yield an RDF formula (a subclass of N3 `log:Formula`).
Evaluates to `false` if an unrecognized document format is retrieved.
Aside: Philosophers will be distracted here into worrying about the meaning of meaning. At least we didn't call this function "meaning"! 
In as much as N3 is used as an interlingua for interoperability for different systems, this for an N3 based system is the meaning expressed by a document.
Related: see `log:parsedAsN3` and `log:content`.""".

log:semanticsOrError a rdf:Property;
    rdfs:domain log:N3Document;
    rdfs:label  "semantics or error message";
    rdfs:comment """This connects a document and either the formula it parses to, or an error message explaining what went wrong with trying.
Related: see `log:semantics`.""".

log:content a rdf:Property;
    rdfs:domain log:N3Document;
    rdfs:range  log:String;
    rdfs:label  "content";
    rdfs:comment """This connects a document and a string that represents it. (Cwm knows how to go get a document in order to evaluate this.)
Note: the content-type of the information is not given and so must be known or guessed.""".

#  Merge two formulae

log:conjunction a rdf:Property;
    rdfs:label "conjunction";
    rdfs:domain log:List;
    rdfs:range  log:Formula;
    rdfs:comment """A function to merge formulae: logical AND.

`true` if and only if `o`, which can be generated, is a formula containing a copy of each of the formulae `$s_1 .. $s_n`.""".

#  Find the set of ALL statements entailed by a given formula.

log:conclusion a rdf:Property;
    rdfs:label "conclusion";
    rdfs:domain log:Formula;
    rdfs:range log:Formula;
    rdfs:comment """All possible conclusions which can be drawn from a formula.

`true` if and only if `$o` is the set of conclusions which can be drawn from `$s`, by successively applying any rules it contains to the data it contains.
Note: this is equivalent to cwm's "--think" command line function. It does use built-ins, so it may for example indirectly invoke other documents, validate signatures, etc.""".

############# Automatic processing steered by metadata

log:definitiveDocument a rdf:Property;
    rdfs:label "definitive document";
    rdfs:domain rdf:Property;
    rdfs:range log:N3Document;
    rdfs:comment
""" When document D is the definitiveDocument for property P,
any statement X P Y is true iff the semantics of document D
include that statement.

For example, there may be a definitive document for the zipcode of
airports by airport code, and so on. This is useful to let a reasoner
know that it can extend its query to the given document.
(Cwm will do this if its mode includes "r").
""";
    vs:term_status "deprecated".

log:definitiveService a rdf:Property;
    rdfs:label "definitive service";
    rdfs:domain rdf:Property;
#   rdfs:range log:N3Document;
    rdfs:comment
""" When service S is the definitiveService for property P,
any statement X P Y is true iff and only if a query to S returns
that it is.  The protocol for the service S depends on the scheme.
For mysql protocol, the URI of the service is like
`sql://user:password@host.domain/database/`.

For example, there may be a definitive service for the zipcode of
airports by airport code, and so on. This is useful to let a reasoner
know that it can help resolve a query by delegating it to the service
in question.
(Cwm will do this if its mode includes "r").
""";
    vs:term_status "deprecated".


################### String output

log:outputString a rdf:Property;
    rdfs:label "output string";
    rdfs:range log:String;
    rdfs:comment """The subject is a key and the object is a string,
where the strings are to be output in the order of the keys.
See cwm --strings in cwm --help.
""";
    vs:term_status "deprecated".


################### Experimental

log:becomes a rdf:Property;
    rdfs:label "becomes";
    rdfs:comment """
Built-in to perform RDF linear implication i.e. retracting the subject graph and asserting the object graph.
""";
    vs:term_status "unstable".

log:dtlit a rdf:Property;
    rdfs:labe "dtlit";
    rdfs:domain log:List;
    rdfs:range rdfs:Literal;
    rdfs:comment """Takes a list of a string and an IRI and creates a datatyped literal.
The subject is a list composed of a string and an IRI, and the object is a datatyped literal with the value `$s_1` and datatype `$s_2`.

`true` if and only if the datatyped literal formed of `$s_0` and `$s_1` equals `$o`.

Example: ``{ ("2005-03-30T11:00:00" xsd:dateTime) log:dtlit ?X } => { ?X a :Answer } .` will produce `"2005-03-30T11:00:00"^^xsd:dateTime a :Answer .`""".

log:langlit a rdf:Property;
    rdfs:labe "langlit";
    rdfs:domain log:List;
    rdfs:range rdfs:Literal;
    rdfs:comment """Takes a list of two strings and creates a language-tagged literal.
The subject is a list composed of two strings, and the object is a language-tagged literal with the value `$s_1` and language `$s_2`.

`true` if and only if the language-tagged literal formed of `$s_1` and `$s_2` equals `$s_3`.

`$s_2` should be a string in the form of a [BCP47](https://tools.ietf.org/html/bcp47) language tag.

Example: `{ ("hello" "en") log:langlit ?X } => { ?X a :Answer } .` will produce `"hello"^^en a :Answer .`""".

log:forAllIn a rdf:Property;
    rdfs:label "forAllIn";
    rdfs:comment """Built-in for implementing a scoped universal quantification.""";
    vs:term_status "unstable".

log:forAllInClosure a rdf:Property;
    rdfs:label "forAllInClosure";
    rdfs:comment """Built-in for implementing a scoped universal quantification.""";
    vs:term_status "unstable".

log:notIn a rdf:Property;
    rdfs:label "notIn";
    rdfs:comment """Custom built-in for implementing scoped negation-as-failure (SNAF).""";
    vs:term_status "unstable".

log:notInClosure a rdf:Property;
    rdfs:label "notInClosure";
    rdfs:comment """Custom built-in for implementing scoped negation-as-failure (SNAF).""";
    vs:term_status "unstable".

log:skolem a rdf:Property;
    rdfs:label "skolem";
    rdfs:domain log:List;
    rdfs:range log:String;
    rdfs:comment """Built-in to generate a Skolem IRI object which is a function of the arguments in the subject list""";
    vs:term_status "unstable".

log:N3 a rdfs:Datatype;
    rdfs:subClassOf rdfs:Literal;
    rdfs:comment """
The class log:N3 is the class of N3 literal values.
log:N3 is an instance of rdfs:Datatype and a subclass of rdfs:Literal.
The value of log:content of a log:N3Document is a literal with datatype log:N3.
""";
    vs:term_status "unstable".

################### Purge control

log:Chaff a rdfs:Class;
    rdfs:label "Chaff";
    rdfs:comment """Any statement mentioning anything in this class
is considered boring and purged by the cwm --purge option.
This is a convenience, and does not have any value when published as a
general fact on the web.""".


################# Simple Builtins:
#

log:uri a rdf:Property;
    rdfs:lable "uri";
    rdfs:comment 
"""This allows one to look at the actual string of the URI which identifies this.

(Cwm can get the URI of a resource or get the resource from the URI.)
This is a level breaker, breaking the rule of not looking inside a
URI.   Use (eg with  string:match) to replace RDF's old "aboutEach"
functionality. Use to implement the URI spec and protocol specs, etc.
""";
    rdfs:range log:String.

log:rawUri a rdf:Property;
    rdfs:label "raw uri";
    rdfs:comment 
"""This allows one to look at the actual string of the URI which identifies this,
for anything, even a blank node or a formula. This peeks into the internal
workings of cwm, and so is not normally used. Use log:uri instead.
""";
    rdfs:range log:String.

log:racine a rdf:Property;
    rdfs:label "racine";
    rdfs:comment """For anything identified by a URI with a fragid, this is the
thing identified by the same URI without a hash or fragid.
For anything else, it is itself.""".


# ends
